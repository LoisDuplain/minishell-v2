--
-                             -
-a-
-                          a                                 -
-     echo a      -
-     echo        a      -
-     ecHo         a      -
-     EcHo          a      -



-----	ERRORS		-----





-----	CHECKED		-----

# Command:	echo s"a"'l'ut

Should	return:			salut	<- NL
	It returns:			salut	<- NL

-----------------------------------------

# Command:	'e'"c"'h'"o" '-'"n" s"a"'l''u"t'

	It returns:			salu"t	<- No NL
Should	return:			salu"t	<- No NL

-----------------------------------------

# Command:	echo .salut. ."bl'ur'p". .'bl"ur"p'. .'var -$USER- var'. ."var -$USER- var". .attention -$USER- attention. .errno:$?. .$?. .$?a. .$. ".$."

	It returns:			.salut. .bl'ur'p. .bl"ur"p. .var -$USER- var. .var -lduplain- var. .attention -lduplain- attention. .errno:0. .0. .0a. .$. .$.
Should	return:			.salut. .bl'ur'p. .bl"ur"p. .var -$USER- var. .var -lduplain- var. .attention -lduplain- attention. .errno:0. .0. .0a. .$. .$.








-----------------------------------------

TODO:

#	Quotes interpretations:
		- ' inhibit all interpretation of a sequence of characters.
		- " inhibit all interpretation of a sequence of characters except for $.
	---	TODO: One thing to fix to print a dollar when there is no env var key after.
		TODO: $? ERRNO AND EXIT STATUS
#	Environment variables ($ followed by characters) should expand to their values.
	---	TODO: One thing to fix to print a dollar when there is no env var key after.
		TODO: $? ERRNO AND EXIT STATUS
#	$? should expand to the exit status of the most recently executed foreground pipeline.
	---	TODO: $? ERRNO AND EXIT STATUS

	TODO: Run all pipes and wait all after.

#	Shortcuts:
	- ctrl-C ctrl-D ctrl-\ should work like in bash.
	- ctrl-C print a new prompt on a newline.
	- ctrl-D exit the shell.
	- ctrl-\ do nothing.
	---	TODO: Do shortcuts and test it.

Done:

#	Search and launch the right executable (based on the PATH variable or by using relative or absolute path)
	--- Nothig to say.

#	Not interpret unclosed quotes or unspecified special characters like \ or ;.
	---	Do a function who returns a boolean to check if all quotes are closed.

#	Not use more than one global variable, think about it and be ready to explain why you do it.
	---	Global variables have been created for noobs.

#	Show a prompt when waiting for a new command.
	---	The prompt is the current working directory.

#	Have a working History.
	---	Using history.h contained in readline formulae.

#	It must implement the builtins:
		- echo with option -n
		- cd with only a relative or absolute path
		- pwd with no options
		- export with no options
		- unset with no options
		- env with no options or arguments
		- exit with no options
	--- All is done.

#	Redirections:
		- ">" should redirect output.	TODO: Test if program doesnt have rights to write.
		- ">>" should redirect output with append mode. TODO: if program doesnt have rights to write.
		
		- "<" should redirect input.	TODO: Test if program doesnt have rights to read.
		- "<<" read input from the current source until a line containing only the delimiter is seen. it doesnâ€™t need to update history!	TODO: Test if program doesnt have rights to write.
		
		Pipes | The output of each command in the pipeline is connected via a pipe to the input of the next command.
		
	---	Redirect input or output.
